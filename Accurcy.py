# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Accurcy.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets, uic
import xlrd
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import *
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics
import os.path


class Ui_MainWindow3(QtWidgets.QMainWindow):
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    UI_FILE = os.path.join(BASE_DIR, "Accurcy.ui")

    def __init__(self):
        super(Ui_MainWindow3, self).__init__()
        uic.loadUi(self.UI_FILE, self)


        try:
            file_name, _ = QFileDialog.getOpenFileName(QFileDialog(), 'Open xlsx File', r"<Default dir>", "xlsx files (*.xlsx)")
            self.z =  file_name
            self.anomaly_details = xlrd.open_workbook(r""+self.z+"")
            self.sheet = self.anomaly_details.sheet_by_index(0)
            self.data1 = pd.read_excel(self.z)
            self.df = pd.DataFrame(self.data1)

            self.df.fillna(self.df.mean(), inplace=True)

            X = self.df[['Y_%', 'G_%', 'B_%']]
            y = self.df['Level of disease']
            y.fillna('level 0', inplace=True)
            self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.25, random_state=1)  # 75% training and 30% test
            self.data=[self.X_test.columns.values.tolist()] + X.values.tolist()


            self.tableWidget.setColumnCount(len(self.X_test.columns))
            self.tableWidget.setRowCount(len(self.X_test))  # same no.of rows as of csv file
            for row, columnvalues in enumerate(self.data):
                for column, value in enumerate(columnvalues):
                    self.item = QtWidgets.QTableWidgetItem(str(value))  # str is to also display the integer values
                    self.tableWidget.setItem(row - 0, column, self.item)
                    # to set the elements read only
                    self.item.setFlags(QtCore.Qt.ItemIsEnabled)
        except:
            print("")
        self.pushButton.clicked.connect(self.DT_check)
        self.pushButton_2.clicked.connect(super(Ui_MainWindow3, self).close)


        self.tableWidget.horizontalHeader().setVisible(False)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("alternate-background-color: rgb(159,87,43);")
        self.setWindowTitle("DT-Accurcy")
        self.setWindowIcon(QIcon('Logo.png'))
        self.lineEdit.setAlignment(Qt.AlignCenter)


    def DT_check(self):
        try:
            clf = DecisionTreeClassifier()
            clf = clf.fit(self.X_train, self.y_train)
            y_pred = clf.predict(self.X_test)
            accurcy = str(metrics.accuracy_score(self.y_test, y_pred) * 100)
            self.lineEdit.setText(accurcy[0:5])
        except:
            print("")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = Ui_MainWindow3()
    window.show()
    sys.exit(app.exec_())

