# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DT_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import pandas as pd
import pydotplus
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QImage, QIcon
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QLabel, QFileDialog, QAction
from pandas.tests.io.excel.test_xlrd import xlrd
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from prediction import Ui_MainWindow1
from Naive_Bayes_Prediction import Ui_MainWindow5
from Accurcy import Ui_MainWindow3
from AccurcyNB import Ui_MainWindow7
from About import Ui_MainWindow8
import os.path


class Ui_Form(QtWidgets.QMainWindow):
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    UI_FILE = os.path.join(BASE_DIR, "DT_GUI_F2.ui")

    def  main1(self):
        self.window = Ui_Form()
        self.window.show()


    def  openpred(self):
        self.window1 = Ui_MainWindow1()
        self.window1.show()

    def  NB_openpred(self):
        self.window11 = Ui_MainWindow5()
        self.window11.show()

    def  openAcc(self):
        try:
            self.window = Ui_MainWindow3()
            self.window.show()
        except:
            print("")

    def  openAccNB(self):
        try:
            self.window111 = Ui_MainWindow7()
            self.window111.show()
        except:
            print("")

    def  openAbout(self):
        try:
            self.window112 = Ui_MainWindow8()
            self.window112.show()
        except:
            print("")


    def __init__(self):
        super(Ui_Form, self).__init__()
        uic.loadUi(self.UI_FILE, self)
        self.pushButton.clicked.connect(self.openpred)
        self.pushButton_4.clicked.connect(self.openAcc)
        self.pushButton_9.clicked.connect(self.openAccNB)
        self.pushButton_5.clicked.connect(super(Ui_Form, self).close)
        self.pushButton_2.clicked.connect(self.build_tree)
        self.pushButton_7.clicked.connect(self.build_NB)
        self.pushButton_3.clicked.connect(self.getdata_DT)
        self.pushButton_10.clicked.connect(self.getdata_NB)
        self.pushButton_6.clicked.connect(self.NB_openpred)
        self.pushButton_8.clicked.connect(self.openAbout)
        self.zoomout.clicked.connect(self.on_zoom_out)
        self.zoomin.clicked.connect(self.on_zoom_in)
        self.setWindowTitle("Main Page")
        self.setWindowIcon(QIcon('Logo.png'))

        self.pushButton_2.setDisabled(True)
        self.pushButton.setDisabled(True)
        self.pushButton_4.setDisabled(True)

        self.pushButton_7.setDisabled(True)
        self.pushButton_6.setDisabled(True)
        self.pushButton_9.setDisabled(True)


        self.tableWidget.horizontalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("alternate-background-color: rgb(159,87,43);")

        






    def getdata_DT(self):
        try:
            file_name, _ = QFileDialog.getOpenFileName(QFileDialog(), 'Open xlsx File', r"<Default dir>", "xlsx files (*.xlsx)")
            print ()


            self.anomaly_details = xlrd.open_workbook(file_name)
            self.sheet = self.anomaly_details.sheet_by_index(0)
            self.data = [ [self.sheet.cell_value(r, c) for c in range(self.sheet.ncols)]for r in range(self.sheet.nrows)]
            self.tableWidget.setColumnCount(self.sheet.ncols)
            self.tableWidget.setRowCount(self.sheet.nrows - 1)  # same no.of rows as of csv file
            for row, columnvalues in enumerate(self.data):
                for column, value in enumerate(columnvalues):
                    self.item = QtWidgets.QTableWidgetItem(str(value) )  # str is to also display the integer values
                    self.tableWidget.setItem(row - 0, column, self.item)
                    self.item.setFlags(QtCore.Qt.ItemIsEnabled)

            self.pushButton_2.setDisabled(False)
            self.pushButton_7.setDisabled(True)
            self.pushButton_6.setDisabled(True)
            self.pushButton_9.setDisabled(True)

        except:
            print("")

    def getdata_NB(self):
        try:
            file_name, _ = QFileDialog.getOpenFileName(QFileDialog(), 'Open xlsx File', r"<Default dir>",
                                                       "xlsx files (*.xlsx)")
            print()

            self.anomaly_details = xlrd.open_workbook(file_name)
            self.sheet = self.anomaly_details.sheet_by_index(0)
            self.data = [[self.sheet.cell_value(r, c) for c in range(self.sheet.ncols)] for r in
                         range(self.sheet.nrows)]
            self.tableWidget.setColumnCount(self.sheet.ncols)
            self.tableWidget.setRowCount(self.sheet.nrows - 1)  # same no.of rows as of csv file
            for row, columnvalues in enumerate(self.data):
                for column, value in enumerate(columnvalues):
                    self.item = QtWidgets.QTableWidgetItem(str(value))  # str is to also display the integer values
                    self.tableWidget.setItem(row - 0, column, self.item)
                    self.item.setFlags(QtCore.Qt.ItemIsEnabled)

            self.pushButton_7.setDisabled(False)
            self.pushButton_2.setDisabled(True)
            self.pushButton.setDisabled(True)
            self.pushButton_4.setDisabled(True)

        except:
            print("")


    def build_tree(self):
        self.data = pd.read_excel(r'dataset-11.xlsx')
        self.df = pd.DataFrame(self.data)
        df2 = pd.DataFrame(self.df, columns=['Y_%', 'G_%', 'B_%', 'Level of disease'])
        self.df.fillna(self.df.mean(), inplace=True)

        X = self.df[['Y_%', 'G_%', 'B_%']]
        y = self.df['Level of disease']
        y.fillna('level 0', inplace=True)


        one_hot_data = pd.get_dummies(X)

        clf = DecisionTreeClassifier()
        clf_train = clf.fit(one_hot_data, y)
        dot_data = tree.export_graphviz(clf_train, out_file=None, feature_names=list(one_hot_data.columns.values),
                                        class_names=['level 0', 'level 1', 'level 2', 'level 3', 'level 4', ''],
                                        rounded=True, filled=True)
        graph = pydotplus.graph_from_dot_data(dot_data)

        graph.write_png("Levelofdisease.png")

        self.imageLabel = QLabel()

        self.image = QPixmap('Levelofdisease.png')

        self.imageLabel.setPixmap(self.image)
        self.scrollArea.setWidget(self.imageLabel)
        self.height = self.image.height()


        self.pushButton.setDisabled(False)
        self.pushButton_4.setDisabled(False)

    def build_NB(self):

        print('Step 2: Load and Pre-Process The Data .....')
        candidates = pd.read_excel(r'dataset-1.xlsx')
        df = pd.DataFrame(candidates, columns=['Y_%', 'G_%', 'B_%', 'Level of disease'])
        print(df)
        print(' ')

        print('Step 3: Subset The Data to build model .....')
        X = df[['Y_%', 'G_%', 'B_%']]
        y = df['Level of disease']
        print(' ')

        print('Step 4: Split The Data Into Train And Test Sets .....')
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
        print(type(X_train))
        print(type(y_train))
        print(' ')

        print('Step 5: Build A MultinomialNB Classifier .....')
        MultiNB = MultinomialNB()
        MultiNB.fit(X_train, y_train)
        print(1)

        print('Step 6: Prediction: use the model to predict for X_test and compare the result of prediction with y_test to measure the accuracy .....')
        print(' ')
        y_expect = y_test
        y_predict = MultiNB.predict(X_test)
        print(' ')
        print('The accuracy of MultinomialNB Classifier:', accuracy_score(y_expect, y_predict))
        print(' ')

        print('Step 7: Predictions for new data using MultinomialNB .....')
        print(' ')

        self.imageLabel1 = QLabel()

        self.image1 = QPixmap('NaiveBased.jpg')

        self.imageLabel1.setPixmap(self.image1)
        self.scrollArea.setWidget(self.imageLabel1)



        self.pushButton_6.setDisabled(False)
        self.pushButton_9.setDisabled(False)


    def on_zoom_in(self, event):
        try:
            self.height += 50
            self.resize_image()
        except:
            print("")

    def on_zoom_out(self, event):
        try:
            self.height -= 100
            self.resize_image()
        except:
            print("")
    def resize_image(self):
        scaled_pixmap = self.image.scaledToHeight(self.height)
        self.imageLabel.setPixmap(scaled_pixmap)

    def close(self):
        sys.exit(app.exec_())

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = Ui_Form()
    window.show()
    sys.exit(app.exec_())



