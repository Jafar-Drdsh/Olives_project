# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'predicton.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QLabel, QFileDialog, QAction
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
from load import Ui_MainWindow2
import os.path



class Ui_MainWindow1(QtWidgets.QMainWindow):
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    UI_FILE = os.path.join(BASE_DIR, "pridiction2.ui")

    def __init__(self):
        super(Ui_MainWindow1, self).__init__()
        uic.loadUi(self.UI_FILE, self)

        self.pushButton_6.clicked.connect(self.predict)
        self.pushButton_2.clicked.connect(super(Ui_MainWindow1, self).close)
        self.pushButton_3.clicked.connect(self.openload)
        self.setWindowTitle("DT_Prediction")
        self.setWindowIcon(QIcon('Logo.png'))
        self.lineEdit.setAlignment(Qt.AlignCenter)
        self.lineEdit_2.setAlignment(Qt.AlignCenter)
        self.lineEdit_3.setAlignment(Qt.AlignCenter)
        self.lineEdit_4.setAlignment(Qt.AlignCenter)


    def  openload(self):
        try:
            self.window = Ui_MainWindow2()
            self.window.show()
        except:
            print("")


    def predict(self):
        try:
            self.data = pd.read_excel(r'dataset-1.xlsx')
            self.df = pd.DataFrame(self.data)
            df2 = pd.DataFrame(self.df, columns=['Y_%', 'G_%', 'B_%', 'Level of disease'])
            self.df.fillna(self.df.mean(), inplace=True)

            X = self.df[['Y_%', 'G_%', 'B_%']]
            y = self.df['Level of disease']
            y.fillna('level 0', inplace=True)

            one_hot_data = pd.get_dummies(X)

            clf = DecisionTreeClassifier()
            clf_train = clf.fit(one_hot_data, y)

            y = self.lineEdit_4.text()
            g = self.lineEdit_2.text()
            b = self.lineEdit_3.text()

            prediction1 = clf.predict([[y, g, b]])
            print('Predicted Result1 using Decision Tree Classifier: ', prediction1)
            print(' ')
            print(type(prediction1[0]))
            self.lineEdit.setText(prediction1[0])
        except:
            print("")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = Ui_MainWindow1()
    window.show()
    sys.exit(app.exec_())

